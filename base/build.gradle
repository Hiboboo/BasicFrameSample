plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id "kotlin-kapt"
    id 'maven-publish'
    id 'nu.studer.credentials' version '2.1'
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 21
        targetSdk 31
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }
    kapt {
        arguments {
            arg("rxhttp_rxjava", "3.1.4")
            arg("rxhttp_package", "rxhttp")
        }
    }
    buildFeatures{
        viewBinding true
        dataBinding true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    sourceSets {
        main {
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
            aidl.srcDirs = ['aidl']
        }
    }
    //生成文档注释
    task generateSourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        archiveClassifier.set('sources')
    }
}

def getPropertyFromLocalProperties(key) {
    File file = project.rootProject.file('local.properties')
    if (file.exists()) {
        Properties properties = new Properties()
        properties.load(file.newDataInputStream())
        return properties.getProperty(key)
    }
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = "com.jinkeen.base"
            artifactId = "frame"
            version = "1.0.23"
            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
            artifact generateSourcesJar
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    // 避免出现空节点或 artifactId=unspecified 的节点
                    if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
                        println it.toString()
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'api')
                    }
                }
            }
        }
    }
    repositories {
        maven {
            allowInsecureProtocol true
            url = "https://devrepo.devcloud.cn-east-3.huaweicloud.com/artgalaxy/cn-east-3_0c81d4c71200f2da0f19c01299498820_maven_1_0/"
            credentials {
                username = getPropertyFromLocalProperties("bintray.user").toString()
                password = getPropertyFromLocalProperties("bintray.password").toString()
            }
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation "org.bouncycastle:bcprov-jdk15on:1.70"

    api 'androidx.multidex:multidex:2.0.1'

    api 'com.google.code.gson:gson:2.8.9'
    api 'com.jakewharton.rxbinding4:rxbinding:4.0.0'

    // 升腾C960F
    compileOnly fileTree(include: ['*.jar'], dir: 'centerm-960f-libs')
    // 新大陆N910
    compileOnly fileTree(include: ['*.jar'], dir: 'newland-n910-libs')

    // Coil
    api 'io.coil-kt:coil:2.0.0'
    // gif
    api 'pl.droidsonroids.gif:android-gif-drawable:1.2.23'

    api 'com.github.liujingxing.rxhttp:rxhttp:2.8.8'
    api 'com.squareup.okhttp3:okhttp:4.9.3' //rxhttp v2.2.2版本起，需要手动依赖okhttp
    kapt 'com.github.liujingxing.rxhttp:rxhttp-compiler:2.8.8'
    api 'com.github.liujingxing.rxlife:rxlife-coroutine:2.1.0'
    api 'io.reactivex.rxjava3:rxjava:3.1.4'
    api 'io.reactivex.rxjava3:rxandroid:3.0.0'
    api 'com.github.liujingxing.rxlife:rxlife-rxjava3:2.2.2'

    // EventBus
    api 'org.greenrobot:eventbus:3.2.0'
    // 更多样式的Toast
    api 'io.github.muddz:styleabletoast:2.4.0'
    // XPopup 更多的弹窗样式
    api 'com.github.li-xiaojun:XPopup:2.3.8'
}